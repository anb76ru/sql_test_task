Даны две таблицы

---------------------------------------------------------------------------------------------------
if object_id('stack.OrderItems') is not null
   drop table stack.OrderItems;
go

if object_id('stack.Orders') is not null
   drop table stack.Orders;
go

-- Заказы
create table stack.Orders
(
   row_id int identity not null,
   parent_id int,                         -- row_id родительской группы
   is_group int,                          -- признак того, что запись является
                                          -- группой заказов (1) или заказом (0)
   customer nvarchar(max) not null,       -- наименование заказчика

   constraint PK_Orders
      primary key nonclustered (row_id),
   constraint FK_Orders_Folder 
      foreign key (parent_id) 
      references stack.Orders(row_id)
      on delete no action
      on update no action
);
go

-- Позиции заказов
create table stack.OrderItems
(
   row_id int identity not null,
   order_id int not null,                 -- row_id заказа
   name nvarchar(max) not null,           -- наименование позиции
   price int not null,                    -- стоимость позиции в рублях

   constraint PK_OrderItems
      primary key nonclustered (row_id),
   constraint FK_OrderItems_Orders
      foreign key (order_id) 
      references stack.Orders(row_id)
      on delete cascade
      on update cascade
);
go
---------------------------------------------------------------------------------------------------

Таблица Orders содержит сведения о заказах в интернет-магазине, таблица OrderItems - позиции в заказах.
Данные в таблице Orders имеют древовидную структуру. Записи, у которых поле is_group равно 1, 
предназначены для группировки заказов по категориям. Такие записи не имеют связанных позиций в таблице
OrderItems, но могут содержать в себе заказы или другие группы. Если же поле is_group равно 0, то
запись является заказом. Она обязательно имеет позиции, и не может иметь вложенных заказов. Записи 
связываются с родительской группой с помощью поля parent_id, которое хранит row_id этой группы. Записи 
с parent_id равным null считаются корневыми. Заказ может иметь несколько позиций с одинаковым 
наименованием.

В таблицах имеются следующие данные:

---------------------------------------------------------------------------------------------------
insert into stack.Orders(parent_id, is_group, customer)             -- 1
values (null, 1, N'Все заказы');

   insert into stack.Orders(parent_id, is_group, customer)          -- 2
   values (1, 1, N'Частные лица');

      insert into stack.Orders(parent_id, is_group, customer)       -- 3
      values (2, 1, N'Оргтехника');

         insert into stack.Orders(parent_id, is_group, customer)    -- 4
         values (3, 0, N'Иванов');

         insert into stack.Orders(parent_id, is_group, customer)    -- 5
         values (3, 0, N'Петров');

      insert into stack.Orders(parent_id, is_group, customer)       -- 6
      values (2, 1, N'Канцелярия');

         insert into stack.Orders(parent_id, is_group, customer)    -- 7
         values (6, 0, N'Сидоров');

   insert into stack.Orders(parent_id, is_group, customer)          -- 8
   values (1, 1, N'Юридические лица');

      insert into stack.Orders(parent_id, is_group, customer)       -- 9
      values (8, 0, N'ИП Федоров');


insert into stack.OrderItems(order_id, name, price)
values (4, N'Принтер', 30);
insert into stack.OrderItems(order_id, name, price)
values (4, N'Копировальный аппарат', 50);
insert into stack.OrderItems(order_id, name, price)
values (4, N'Факс', 20);


insert into stack.OrderItems(order_id, name, price)
values (5, N'Принтер', 50);
insert into stack.OrderItems(order_id, name, price)
values (5, N'Факс', 30);
insert into stack.OrderItems(order_id, name, price)
values (5, N'Факс', 30);


insert into stack.OrderItems(order_id, name, price)
values (7, N'Бумага', 2);
insert into stack.OrderItems(order_id, name, price)
values (7, N'Ручки', 1);


insert into stack.OrderItems(order_id, name, price)
values (9, N'Кулер', 100);
insert into stack.OrderItems(order_id, name, price)
values (9, N'Стулья', 70);
insert into stack.OrderItems(order_id, name, price)
values (9, N'Факс', 20);
go
---------------------------------------------------------------------------------------------------

Корневой группой является запись "Все заказы", в нее вложены группы "Частные лица" и "Юридические лица".
Примером заказа является запись "ИП Федоров", которая находится в группе "Юридические лица".

В заданиях используется Microsoft SQL Server 2014, но при необходимости для решения можно использовать
PostgreSQL.


== Задание 1.

Написать функцию select_orders_by_item_name. Она получает один аргумент - наименование позиции (строка),
и должна найти все заказы, в которых имеется позиция с данным наименованием. Кроме того, она должна
подсчитать количество позиций с указанным наименованием в каждом отдельном заказе. Результатом вызова
функции должна быть таблица с тремя колонками:

- order_id (row_id заказа)
- customer (наименование заказчика)
- items_count (количество позиций с данным наименованием в этом заказе)

Примеры вызова функции:

select * from stack.select_orders_by_item_name(N'Факс')
-- 4  Иванов      1
-- 5  Петров      2
-- 9  ИП Федоров  1

select * from stack.select_orders_by_item_name(N'Принтер')
-- 4  Иванов      1
-- 5  Петров      1

select * from stack.select_orders_by_item_name(N'Стулья')
-- 9  ИП Федоров  1


== Задание 2.

Написать функцию calculate_total_price_for_orders_group. Она получает row_id группы (либо заказа),
и возвращает суммарную стоимость всех позиций всех заказов в этой группе (заказе), причем 
суммирование должно выполняться по всему поддереву заказов, начинающемуся с данной группы.
Функция должна возвращать число.

Примеры вызова функции:

select stack.calculate_total_price_for_orders_group(1) as total_price   -- 403, все заказы
select stack.calculate_total_price_for_orders_group(2) as total_price   -- 213, группа 'Частные лица'
select stack.calculate_total_price_for_orders_group(3) as total_price   -- 210, группа 'Оргтехника'
select stack.calculate_total_price_for_orders_group(8) as total_price   -- 190, группа 'Юридические лица'
select stack.calculate_total_price_for_orders_group(9) as total_price   -- 190, заказ 'ИП Федоров'